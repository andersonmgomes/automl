algorithm,params,features,n_features,train_time,predict_time,mem_max,f1_weighted,balanced_accuracy,roc_auc_ovr_weighted,confusion_matrix
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0056195000000798245,0.0004774133333323031,580.8359375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.6), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 1), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13809149999997317,0.001000566666668116,532.51171875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.1), ('lambda', 1.0), ('max_depth', 17), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12609050000014577,0.0009902499999952853,2415.828125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.5), ('lambda', 0.1), ('max_depth', 17), ('min_child_weight', 7), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12251730000002681,0.0010047966666661523,2415.37109375,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 30), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 10), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.33522450000009485,0.008788279999998849,2174.765625,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 100.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.030466600000181643,0.00046835666666993346,2104.81640625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 1000.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.04246950000015204,0.0004591299999901821,2104.89453125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.tree._classes.DecisionTreeClassifier'>,"OrderedDict([('criterion', 'entropy')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003777399999989939,0.000479526666667122,2045.10546875,0.9665831244778613,0.9666666666666667,0.975,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.6), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13032110000017383,0.0009896466666684015,2414.984375,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.1), ('max_depth', 17), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12209759999996095,0.0009968700000020667,2415.0390625,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.9), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13062390000004598,0.000998323333336278,532.22265625,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 1.0), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 7), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.11677209999993465,0.0009532133333323145,532.28125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.8), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12505099999998492,0.0010133833333308454,2415.58984375,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.8), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.05), ('lambda', 0.1), ('max_depth', 15), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12566629999992074,0.0010276933333292011,2414.296875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'constant'), ('momentum', 0.9)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.18121049999990646,0.00042434333333100466,2241.921875,0.9665831244778613,0.9666666666666667,0.9783333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'adaptive'), ('momentum', 0.9)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1739744999999857,0.00042977666666956795,2241.609375,0.9665831244778613,0.9666666666666667,0.9866666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1.0), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.005315500000051543,0.0005141233333347372,580.8828125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 100.0), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004637000000002445,0.0005015899999989415,1971.15234375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.8), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.1), ('lambda', 0.1), ('max_depth', 17), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1205238999998528,0.0010080599999961728,2415.875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 100.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.005513300000018262,0.000455530000001166,1971.21875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.6), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.01), ('max_depth', 12), ('min_child_weight', 7), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12568050000004405,0.0010376333333321477,2415.63671875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1000.0), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004104799999936404,0.0004684100000001005,1971.078125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 100.0), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004252000000008138,0.00048701666666678043,1971.4453125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.18462209999984225,0.00044149000000288653,2241.73046875,0.9333333333333333,0.9333333333333332,0.9783333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.9)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.16955370000005132,0.00045623000000129347,2241.51171875,0.9333333333333333,0.9333333333333332,0.975,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'adaptive'), ('momentum', 0.1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.17044529999998304,0.0004171733333350858,2241.63671875,0.9333333333333333,0.9333333333333332,0.9716666666666668,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 10.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0047417999999765925,0.0004740599999990991,1971.765625,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis'>,"OrderedDict([('priors', None)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0034342000001288397,0.0005169633333328723,2246.0234375,0.9333333333333333,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 10.0), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.005019700000048033,0.00046899333333385587,1971.21484375,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 10.0), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0055263000000422835,0.000464833333334506,580.96875,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 10.0), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.005687099999988732,0.0005333466666665269,1971.30859375,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 7), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003736500000002252,0.006200576666666772,1955.1796875,0.9326599326599326,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 15), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003933299999999917,0.005990983333333588,1945.6796875,0.9326599326599326,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 13), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.00412609999997926,0.006152813333332574,1946.8984375,0.9326599326599326,0.9333333333333332,0.9949999999999998,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 9), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0036967000000061034,0.006218210000000113,1947.9921875,0.9326599326599326,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 11), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0035009999999999764,0.005953993333333566,1949.69921875,0.9326599326599326,0.9333333333333332,0.995,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 15), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003948000000008278,0.006186706666666927,1951.09375,0.9326599326599326,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 5), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0032956999999953496,0.005946386666666589,1952.484375,0.9326599326599326,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 9), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003945099999981494,0.005781023333333716,1953.5,0.9326599326599326,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 20), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 10), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.9836003999998866,0.028209900000001654,2182.36328125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 17), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0036588000000108423,0.005908473333333101,1956.98046875,0.9326599326599326,0.9333333333333332,0.9916666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 13), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0043950999999538,0.00585243999999913,1963.22265625,0.9326599326599326,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1000.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.00470860000001494,0.0005357666666668592,1971.21484375,0.9326599326599326,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1.0), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.005849300000022595,0.0004791833333342765,1971.25390625,0.9326599326599326,0.9333333333333332,0.9866666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.01), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.008399899999972149,0.0004785099999973378,1971.2421875,0.9326599326599326,0.9333333333333332,0.9583333333333334,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.001), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.008798400000046058,0.0005476300000016939,580.75390625,0.9326599326599326,0.9333333333333332,0.13333333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 5), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.9797002000000248,0.02850601333333695,2178.6015625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 7), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003079200000001947,0.005820659999999597,1944.30859375,0.9326599326599326,0.9333333333333332,0.9983333333333334,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'log2'), ('min_samples_leaf', 5), ('min_samples_split', 10), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.22988539999983,0.020278046666665734,2212.859375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.001), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.008900499999981548,0.0005274800000014087,581.26953125,0.9326599326599326,0.9333333333333332,0.06833333333333334,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 8), ('max_features', None), ('min_samples_leaf', 2), ('min_samples_split', 15), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.983070199999929,0.03910653666666804,2191.56640625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', None), ('min_samples_leaf', 5), ('min_samples_split', 5), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.9601109000000179,0.03076335333333494,2184.671875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 20), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 5), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.2291414999999688,0.01847224999999829,2185.63671875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', 'sqrt'), ('min_samples_leaf', 1), ('min_samples_split', 2), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.3855369000000337,0.018347000000001876,2187.38671875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 8), ('max_features', None), ('min_samples_leaf', 1), ('min_samples_split', 10), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.7803272999999535,0.013709446666666736,2216.265625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 15), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3369284999998854,0.00869942333333711,2210.79296875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', 'log2'), ('min_samples_leaf', 1), ('min_samples_split', 15), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.7792644999999538,0.01650248000000071,2188.7421875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', 'log2'), ('min_samples_leaf', 10), ('min_samples_split', 15), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.969596299999921,0.03258297999999892,2209.8203125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 20), ('max_features', 'sqrt'), ('min_samples_leaf', 5), ('min_samples_split', 5), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.7757090000000062,0.013780919999999242,2192.8515625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', 'log2'), ('min_samples_leaf', 2), ('min_samples_split', 2), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.9680713000000196,0.03214097999999315,2198.66796875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 15), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.7936386000001221,0.013656993333340021,2195.2265625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 5), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.34069690000001174,0.008775199999998524,2207.76171875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 8), ('max_features', None), ('min_samples_leaf', 10), ('min_samples_split', 2), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3416236000000481,0.00884134666666796,2206.15625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'log2'), ('min_samples_leaf', 2), ('min_samples_split', 5), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.9920219000000543,0.04113028333333659,2204.67578125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 5), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0032182999999861295,0.0061741200000000164,1942.94921875,0.9326599326599326,0.9333333333333332,0.9900000000000001,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'log2'), ('min_samples_leaf', 1), ('min_samples_split', 5), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.7933669999999893,0.013183233333332585,2200.19921875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 20), ('max_features', 'sqrt'), ('min_samples_leaf', 5), ('min_samples_split', 15), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.2248368999999002,0.01861727333333268,2201.59765625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.1), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.007150499999966087,0.000514970000002298,581.046875,0.9326599326599326,0.9333333333333332,0.9866666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', 'log2'), ('min_samples_leaf', 2), ('min_samples_split', 5), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.9776518999999553,0.026267526666667134,2222.37109375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.tree._classes.DecisionTreeClassifier'>,"OrderedDict([('criterion', 'gini')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0038548999999648004,0.00046187666666810403,2045.15234375,0.9326599326599326,0.9333333333333332,0.95,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', None), ('min_samples_leaf', 5), ('min_samples_split', 5), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.2072748000000502,0.019866096666661785,2176.84375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 10.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.02248009999993883,0.00045153666666616725,2104.7578125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.8), ('eta', 0.01), ('eval_metric', 'mlogloss'), ('gamma', 0.5), ('lambda', 0.1), ('max_depth', 9), ('min_child_weight', 5), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12583779999999933,0.0010024700000030862,2414.4453125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.8), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.3), ('lambda', 0.01), ('max_depth', 15), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.16628319999995256,0.0010493333333367143,2414.68359375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 11), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004362700000001496,0.006351549999999406,1941.6015625,0.9326599326599326,0.9333333333333332,0.995,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.1), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 1.0), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13706539999998313,0.0010175933333357533,2414.30078125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>,"OrderedDict([('algorithm', 'SAMME.R')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1167328000001362,0.0015050266666700432,2242.13671875,0.9326599326599326,0.9333333333333332,0.9833333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.01), ('max_depth', 17), ('min_child_weight', 3), ('subsample', 0.9), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13322410000000673,0.0009989099999984318,2414.5625,0.9326599326599326,0.9333333333333332,0.9916666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 3), ('min_child_weight', 3), ('subsample', 0.7), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12789020000013807,0.0010188033333330775,2414.015625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier'>,"OrderedDict([('warm_start', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.4572824000001674,0.002149926666667549,2048.671875,0.9326599326599326,0.9333333333333332,0.9866666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.naive_bayes.GaussianNB'>,"OrderedDict([('priors', None)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0036269999998239655,0.00046178666666492064,2242.03515625,0.9326599326599326,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'adaptive'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1668000000001939,0.0004779666666687869,2241.6171875,0.9326599326599326,0.9333333333333332,0.9900000000000001,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 9), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13504009999996924,0.0010280166666689183,2414.3203125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', None), ('min_samples_leaf', 1), ('min_samples_split', 10), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3499056999999084,0.009053850000001754,2228.02734375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 5), ('max_features', None), ('min_samples_leaf', 1), ('min_samples_split', 10), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.2491649999999481,0.01937458999999914,2226.2890625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 5), ('max_features', 'log2'), ('min_samples_leaf', 2), ('min_samples_split', 10), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.34311680000018896,0.008833963333336215,2224.23828125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 7), ('min_child_weight', 5), ('subsample', 0.9), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1304794000000129,0.0010263799999999416,2414.41015625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier'>,"OrderedDict([('warm_start', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.4503621999997449,0.0021100899999964896,2048.66796875,0.9326599326599326,0.9333333333333332,0.9866666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'constant'), ('momentum', 0.1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.18323190000000977,0.0004579966666672893,2241.9609375,0.9326599326599326,0.9333333333333332,0.9783333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._gb.GradientBoostingClassifier'>,"OrderedDict([('loss', 'deviance')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.2500393999998778,0.0004570833333370198,2040.609375,0.9326599326599326,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 10), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.7772729999999228,0.01409881666666782,2220.8984375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 1.0), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 5), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12632939999980408,0.000990166666664057,532.54296875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 17), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003986199999985729,0.005891770000001391,1961.359375,0.9326599326599326,0.9333333333333332,0.995,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', None), ('min_samples_leaf', 2), ('min_samples_split', 10), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.9977923999999803,0.04025440666666782,2219.90234375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 30), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 15), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.7767774999999801,0.013770179999998316,2214.62890625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 1.0), ('eta', 0.01), ('eval_metric', 'mlogloss'), ('gamma', 0.1), ('lambda', 1.0), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.7), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13186719999998786,0.000993196666665123,2414.59765625,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.8), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13723440000012488,0.0009862099999963902,2415.1953125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.6), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.5), ('lambda', 0.01), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13158960000009756,0.000985556666667738,2415.67578125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._voting.VotingClassifier'>,"OrderedDict([('n_jobs', -1), ('voting', 'soft')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.258126700000048,0.002573613333333924,2351.671875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.6), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.01), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 1.0), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13059799999996358,0.0009817699999985052,2415.51953125,0.9326599326599326,0.9333333333333332,0.98,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.6), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13821840000014163,0.0010282999999996416,2415.703125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.9), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.3), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.15108869999994567,0.0011828933333314733,2416.23046875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 1.0), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.3), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.15064050000000861,0.001030909999993431,2416.0859375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.9), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13184869999986404,0.0010133833333384247,1944.18359375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.8), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 5), ('subsample', 0.9), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.14829620000000432,0.0010387766666629735,532.87109375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.9), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13743010000007416,0.0010020366666670573,2415.51171875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13544149999984256,0.0009818133333358977,532.3828125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.gaussian_process._gpc.GaussianProcessClassifier'>,"OrderedDict([('copy_X_train', False), ('n_jobs', -1), ('warm_start', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.019132100000092578,0.003862696666665973,1977.4921875,0.8997493734335841,0.9,0.975,"[[10  0  0]
 [ 0  9  1]
 [ 0  2  8]]"
<class 'sklearn.gaussian_process._gpc.GaussianProcessClassifier'>,"OrderedDict([('copy_X_train', False), ('n_jobs', -1), ('warm_start', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0203223999999409,0.0038442166666679137,1977.67578125,0.8997493734335841,0.9,0.975,"[[10  0  0]
 [ 0  9  1]
 [ 0  2  8]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 1.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.02017520000026707,0.00048549666666986013,2104.75390625,0.8997493734335841,0.9,0.9766666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 3), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0044206999999971686,0.0057636000000002244,1958.45703125,0.8997493734335841,0.9,0.9666666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  2  8]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 3), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003618500000015956,0.008727773333333744,1959.734375,0.8997493734335841,0.9,0.9666666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  2  8]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.18148489999998674,0.0004153133333375081,2241.42578125,0.8997493734335841,0.9,0.9783333333333334,"[[10  0  0]
 [ 0  9  1]
 [ 0  2  8]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'constant'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1776706999999078,0.00044484333333609055,2241.6484375,0.8997493734335841,0.9,0.975,"[[10  0  0]
 [ 0  9  1]
 [ 0  2  8]]"
<class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>,"OrderedDict([('algorithm', 'SAMME')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.10815389999993386,0.0013930266666648094,2241.90625,0.8976982097186702,0.9,0.9900000000000001,"[[10  0  0]
 [ 0 10  0]
 [ 0  3  7]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.001), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.01057140000000345,0.0005847666666663069,1971.25,0.8976982097186702,0.9,0.5,"[[10  0  0]
 [ 0 10  0]
 [ 0  3  7]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.1), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.008712299999956485,0.0005438199999995655,1971.4453125,0.8976982097186702,0.9,0.8366666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  3  7]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.01), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.009189800000058312,0.0005234599999994316,1971.1484375,0.8976982097186702,0.9,0.060000000000000005,"[[10  0  0]
 [ 0 10  0]
 [ 0  3  7]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.1), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.007509400000003552,0.0005477366666658176,580.7578125,0.8976982097186702,0.9,0.8666666666666667,"[[10  0  0]
 [ 0 10  0]
 [ 0  3  7]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 0.1), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.01386739999998099,0.00046902333333491696,2105.27734375,0.8653198653198653,0.8666666666666667,0.9400000000000001,"[[10  0  0]
 [ 0  7  3]
 [ 0  1  9]]"
<class 'sklearn.naive_bayes.MultinomialNB'>,"OrderedDict([('fit_prior', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003306499999780499,0.0005225833333345994,1937.01171875,0.7306397306397306,0.7333333333333334,0.8233333333333334,"[[10  0  0]
 [ 0  5  5]
 [ 0  3  7]]"
<class 'sklearn.naive_bayes.MultinomialNB'>,"OrderedDict([('fit_prior', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004558499999802734,0.0005130533333309965,1937.06640625,0.7306397306397306,0.7333333333333334,0.8233333333333334,"[[10  0  0]
 [ 0  5  5]
 [ 0  3  7]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 0.01), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.03289570000015374,0.0009724400000019766,2105.3125,0.6507936507936508,0.7000000000000001,0.8650000000000001,"[[10  0  0]
 [ 1  2  7]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 0.001), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.011012700000264886,0.0005125299999993634,2105.01171875,0.6161616161616161,0.7000000000000001,0.855,"[[10  0  0]
 [ 1  1  8]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', None), ('min_samples_leaf', 2), ('min_samples_split', 100), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.867314399999941,0.03052135333333202,2196.6171875,0.16666666666666666,0.3333333333333333,0.5,"[[ 0  0 10]
 [ 0  0 10]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', 'log2'), ('min_samples_leaf', 5), ('min_samples_split', 100), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.0170356000000993,0.029253873333338256,2180.0859375,0.16666666666666666,0.3333333333333333,0.5,"[[ 0  0 10]
 [ 0  0 10]
 [ 0  0 10]]"
<class 'sklearn.ensemble._stacking.StackingClassifier'>,"OrderedDict([('n_jobs', -1), ('stack_method', 'auto')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.2969224999997095,0.012152626666678164,2605.76171875,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
