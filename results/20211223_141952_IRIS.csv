algorithm,params,features,n_features,train_time,predict_time,mem_max,f1_weighted,balanced_accuracy,roc_auc_ovr_weighted,confusion_matrix
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 11), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004792599999994707,0.00672181666666655,1935.20703125,0.9333333333333333,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 5), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.00290580000000773,0.009511770000000298,1936.9375,0.9333333333333333,0.9333333333333332,0.995,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 7), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0025547000000045728,0.004973443333333213,1940.2265625,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 15), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0029300000000063164,0.0052800733333337275,1942.64453125,0.9333333333333333,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 13), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0026730000000014797,0.0053005633333332485,1946.2421875,0.9333333333333333,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 9), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0025806999999957725,0.004949953333333213,1948.71484375,0.9333333333333333,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 11), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.002925400000009404,0.005051636666666563,1951.4765625,0.9333333333333333,0.9333333333333332,0.9916666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 15), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0025114999999971133,0.005033613333333639,1955.11328125,0.9333333333333333,0.9333333333333332,0.9949999999999998,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 5), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0025691999999963855,0.007297596666666569,1956.375,0.9333333333333333,0.9333333333333332,0.9900000000000001,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 7), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.002444000000025426,0.005064453333333555,1959.515625,0.9333333333333333,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 9), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0024737999999899785,0.005025263333333404,1962.2734375,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 3), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.002508100000000013,0.0051816666666667285,1965.265625,0.9333333333333333,0.9333333333333332,0.9466666666666668,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 3), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0026527999999927943,0.004916000000000054,1968.36328125,0.9333333333333333,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 17), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.002766799999989189,0.00519094333333309,1971.35546875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 17), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0026482000000100925,0.004947100000000167,1974.6484375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 13), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0024005999999872074,0.008190596666667223,1975.8671875,0.9333333333333333,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1000.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0036664000000143915,0.0003230066666664773,1987.2578125,0.9333333333333333,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 100.0), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003726499999970656,0.0003407300000011067,1987.5,0.9333333333333333,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1.0), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004615400000034242,0.00034130333333261357,1987.8203125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 100.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0035887999999886233,0.0003409633333319562,1987.3671875,0.9333333333333333,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 10.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003574000000014621,0.0003350199999999859,1987.3515625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 10.0), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003771200000016961,0.0003295566666679406,1987.40625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.001), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.005979299999978593,0.0004014566666664147,1987.6640625,0.9665831244778613,0.9666666666666667,0.5,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 100.0), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0037606999999866275,0.0003847500000006221,1987.2265625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.1), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.007583000000010998,0.0003676233333332372,1987.29296875,0.9665831244778613,0.9666666666666667,0.8349999999999999,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.01), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.007451699999990069,0.0003815133333337902,1987.7265625,0.9665831244778613,0.9666666666666667,0.18666666666666665,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.1), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0063562000000274566,0.00042370333333299943,1987.42578125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1000.0), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0036976000000095155,0.0003793199999999312,1987.37890625,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 10.0), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0040544000000295455,0.00035438666666702073,1987.44921875,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.01), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0065640000000257714,0.00039786000000011275,1987.24609375,0.9665831244778613,0.9666666666666667,0.15833333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004230500000005577,0.00039391333333469445,1987.1953125,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.001), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.007625699999948665,0.00036601666666721637,1987.35546875,0.9665831244778613,0.9666666666666667,0.5,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 0.1), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.01257840000005217,0.0006370066666666692,1986.81640625,0.9665831244778613,0.9666666666666667,0.8333333333333334,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 10.0), ('class_weight', None), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0038961999999855834,0.0003934066666640016,595.453125,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1000.0), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003508499999952619,0.00035833666666652185,595.203125,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.gaussian_process._gpc.GaussianProcessClassifier'>,"OrderedDict([('copy_X_train', False), ('n_jobs', -1), ('warm_start', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.019486400000005233,0.0037599500000017843,1990.796875,0.9333333333333333,0.9333333333333332,0.9883333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.gaussian_process._gpc.GaussianProcessClassifier'>,"OrderedDict([('copy_X_train', False), ('n_jobs', -1), ('warm_start', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.02169170000001941,0.003648243333335207,1990.92578125,0.9333333333333333,0.9333333333333332,0.9883333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.tree._classes.DecisionTreeClassifier'>,"OrderedDict([('criterion', 'gini')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003982899999982692,0.0004313066666668419,2037.07421875,0.9665831244778613,0.9666666666666667,0.975,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.tree._classes.DecisionTreeClassifier'>,"OrderedDict([('criterion', 'entropy')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0034021999999822583,0.00045129000000088126,2037.45703125,0.9665831244778613,0.9666666666666667,0.975,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 30), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 10), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.4480350000000044,0.010062329999997625,2196.0078125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', None), ('min_samples_leaf', 5), ('min_samples_split', 5), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.5413740999999845,0.020392453333336866,2196.234375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 5), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.9568169000000353,0.026760559999998653,2198.0625,0.9665831244778613,0.9666666666666667,0.9966666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', 'log2'), ('min_samples_leaf', 5), ('min_samples_split', 100), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.8296889000000647,0.027746156666667805,2199.4609375,0.16666666666666666,0.3333333333333333,0.5,"[[10  0  0]
 [10  0  0]
 [10  0  0]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 20), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 10), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.9090335000000778,0.032006399999996424,2201.61328125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', None), ('min_samples_leaf', 5), ('min_samples_split', 5), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.28776670000002,0.031494613333332686,2202.875,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 20), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 5), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.5460494000000153,0.019178793333336823,2204.5625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', 'sqrt'), ('min_samples_leaf', 1), ('min_samples_split', 2), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.3920649000000367,0.018530709999996967,2205.8671875,0.9665831244778613,0.9666666666666667,0.9966666666666668,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', 'log2'), ('min_samples_leaf', 1), ('min_samples_split', 15), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.7671218000000408,0.012870746666665885,2207.2421875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 8), ('max_features', None), ('min_samples_leaf', 2), ('min_samples_split', 15), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,3.837269699999979,0.052120499999997114,2209.9609375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 8), ('max_features', 'log2'), ('min_samples_leaf', 10), ('min_samples_split', 100), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.95518340000001,0.027635723333332862,2211.765625,0.16666666666666666,0.3333333333333333,0.5,"[[10  0  0]
 [10  0  0]
 [10  0  0]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 15), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.1085520000000315,0.015912280000001524,2213.0390625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', None), ('min_samples_leaf', 2), ('min_samples_split', 100), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.1666983000000073,0.03284552333333674,2215.390625,0.16666666666666666,0.3333333333333333,0.5,"[[ 0  0 10]
 [ 0  0 10]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', 'log2'), ('min_samples_leaf', 2), ('min_samples_split', 2), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.1726520000000846,0.027832666666669562,2217.05859375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 8), ('max_features', None), ('min_samples_leaf', 2), ('min_samples_split', 10), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,3.7917448999999124,0.03628175000000056,2219.28515625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 5), ('max_features', None), ('min_samples_leaf', 5), ('min_samples_split', 2), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3456790999999839,0.010679053333334802,2220.6796875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', 'log2'), ('min_samples_leaf', 5), ('min_samples_split', 10), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.8217374999999265,0.016692286666667163,2222.32421875,0.9665831244778613,0.9666666666666667,0.9966666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'sqrt'), ('min_samples_leaf', 5), ('min_samples_split', 15), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.1895630999999867,0.0183715333333339,2224.38671875,0.9665831244778613,0.9666666666666667,0.9966666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', None), ('max_features', None), ('min_samples_leaf', 1), ('min_samples_split', 10), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.378292399999964,0.028894333333335,2226.0859375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 8), ('max_features', 'log2'), ('min_samples_leaf', 1), ('min_samples_split', 5), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,3.198670399999969,0.039987763333332774,2228.44140625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'sqrt'), ('min_samples_leaf', 5), ('min_samples_split', 100), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3336302999999816,0.00836007333333555,2229.84375,0.16666666666666666,0.3333333333333333,0.5,"[[10  0  0]
 [10  0  0]
 [10  0  0]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 5), ('max_features', 'log2'), ('min_samples_leaf', 10), ('min_samples_split', 15), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,2.13408400000003,0.02712973333332987,2232.04296875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 30), ('max_features', None), ('min_samples_leaf', 10), ('min_samples_split', 15), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.35877019999998083,0.008395103333335404,2233.11328125,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'log2'), ('min_samples_leaf', 2), ('min_samples_split', 10), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3575976999998147,0.0084471399999984,2235.07421875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 5), ('n_estimators', 300), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.2262272999998913,0.017117866666664365,2236.73828125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', 'sqrt'), ('min_samples_leaf', 1), ('min_samples_split', 15), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,4.589069399999971,0.055012973333327865,2239.58984375,0.9665831244778613,0.9666666666666667,0.9966666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 5), ('max_features', 'sqrt'), ('min_samples_leaf', 5), ('min_samples_split', 10), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,3.0075544999999693,0.040562356666669075,2241.765625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 20), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 5), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3492943000001105,0.009736609999996896,2242.546875,0.9665831244778613,0.9666666666666667,0.9966666666666668,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 5), ('max_features', 'sqrt'), ('min_samples_leaf', 1), ('min_samples_split', 5), ('n_estimators', 1200), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,5.6542299000000185,0.08377746666666705,2245.15234375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 30), ('max_features', 'log2'), ('min_samples_leaf', 10), ('min_samples_split', 5), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3885803999999098,0.00869772666666601,2245.18359375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.20057970000016212,0.0004851333333287281,2210.9609375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.20394379999993362,0.0005101366666622198,2210.90625,0.9333333333333333,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'constant'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.19235890000004474,0.0005105699999982486,2211.078125,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.9)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.20941220000008798,0.00046873333333223853,2211.0546875,0.9333333333333333,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'adaptive'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.19103030000019317,0.0004928099999991294,2210.69140625,0.9665831244778613,0.9666666666666667,0.9949999999999999,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'constant'), ('momentum', 0.1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.19838449999997465,0.0005209700000023077,2211.09765625,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'constant'), ('momentum', 0.9)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.20234099999993305,0.0004734833333335094,2211.06640625,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'adaptive'), ('momentum', 0.9)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.20828830000004928,0.0005441166666666201,2210.7890625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'adaptive'), ('momentum', 0.1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.20590240000001359,0.0004937100000006467,2210.5,0.9333333333333333,0.9333333333333332,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>,"OrderedDict([('algorithm', 'SAMME.R')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1245506000000205,0.0019337433333324347,2226.41015625,0.9665831244778613,0.9666666666666667,0.9983333333333334,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>,"OrderedDict([('algorithm', 'SAMME')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1147324999999455,0.0012486899999961073,2226.16796875,0.9665831244778613,0.9666666666666667,0.9700000000000001,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.naive_bayes.GaussianNB'>,"OrderedDict([('priors', None)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004178099999990081,0.000489953333332475,2226.86328125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis'>,"OrderedDict([('priors', None)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0035299000001032255,0.0005202333333348482,2230.73046875,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.8), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.05), ('lambda', 0.1), ('max_depth', 15), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12295599999993101,0.0010113766666639398,2398.046875,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 3), ('min_child_weight', 3), ('subsample', 0.7), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13322040000002744,0.0010315133333354727,2397.97265625,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 9), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1376926000000367,0.0010668066666615534,2397.91796875,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 7), ('min_child_weight', 5), ('subsample', 0.9), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13443659999984447,0.0010143866666642984,2398.01953125,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.1), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 1.0), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.15462239999988014,0.0009751900000007178,2398.40625,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.01), ('max_depth', 17), ('min_child_weight', 3), ('subsample', 0.9), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.137053799999876,0.0010237699999985732,2398.4375,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.8), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.3), ('lambda', 0.01), ('max_depth', 15), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13780659999997624,0.0009887199999942216,2398.87109375,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.8), ('eta', 0.01), ('eval_metric', 'mlogloss'), ('gamma', 0.5), ('lambda', 0.1), ('max_depth', 9), ('min_child_weight', 5), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13788950000002842,0.0010515133333380315,2398.9296875,0.9665831244778613,0.9666666666666667,0.9949999999999999,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 1.0), ('eta', 0.01), ('eval_metric', 'mlogloss'), ('gamma', 0.1), ('lambda', 1.0), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.7), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13475319999997737,0.000994653333327733,2399.0390625,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.6), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13533460000007835,0.0010213766666614295,2399.3046875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 1.0), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.1), ('lambda', 0.01), ('max_depth', 7), ('min_child_weight', 7), ('subsample', 0.7), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12041429999999309,0.0010261533333353631,2399.13671875,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.7), ('eta', 0.1), ('eval_metric', 'mlogloss'), ('gamma', 0.1), ('lambda', 0.01), ('max_depth', 12), ('min_child_weight', 1), ('subsample', 0.9), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.17651850000015656,0.0010633933333338065,2399.30859375,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.8), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.05), ('lambda', 0.01), ('max_depth', 17), ('min_child_weight', 3), ('subsample', 1.0), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.14077670000006037,0.001033270000001115,2399.4140625,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.9), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.1), ('max_depth', 25), ('min_child_weight', 5), ('subsample', 1.0), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13042190000010123,0.0009531566666661699,2399.703125,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.8), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.3), ('lambda', 0.01), ('max_depth', 12), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1387485000000197,0.0010159533333307992,2399.90234375,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 1.0), ('max_depth', 12), ('min_child_weight', 5), ('subsample', 0.7), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.13160609999999906,0.0009778533333398324,2399.8515625,0.9665831244778613,0.9666666666666667,0.9966666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.1), ('max_depth', 25), ('min_child_weight', 5), ('subsample', 1.0), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.14080239999998412,0.0010547366666666372,2399.76953125,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.9), ('lambda', 0.1), ('max_depth', 12), ('min_child_weight', 5), ('subsample', 0.7), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1522635999999693,0.0011707466666621257,2399.7890625,0.9665831244778613,0.9666666666666667,0.9966666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.6), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 1.0), ('max_depth', 15), ('min_child_weight', 3), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.17403960000001462,0.0012810700000045472,2399.8125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.7), ('eta', 0.1), ('eval_metric', 'mlogloss'), ('gamma', 0.5), ('lambda', 0.01), ('max_depth', 9), ('min_child_weight', 3), ('subsample', 0.9), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1387025999999878,0.0010359533333333577,2400.1171875,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.9), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.05), ('lambda', 0.01), ('max_depth', 5), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.14105309999990823,0.0010244299999991806,2399.8984375,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 1.0), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.5), ('lambda', 0.1), ('max_depth', 15), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12346569999999701,0.0010287733333295061,2399.94140625,0.9665831244778613,0.9666666666666667,0.9966666666666668,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.7), ('eta', 0.1), ('eval_metric', 'mlogloss'), ('gamma', 0.1), ('lambda', 0.01), ('max_depth', 7), ('min_child_weight', 3), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1478828000001613,0.001313263333327086,1598.26953125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.0), ('colsample_bytree', 0.6), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 1.0), ('lambda', 0.1), ('max_depth', 15), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12792540000009467,0.0008831933333340203,570.80859375,0.9665831244778613,0.9666666666666667,0.9966666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.9), ('eta', 0.01), ('eval_metric', 'mlogloss'), ('gamma', 0.5), ('lambda', 1.0), ('max_depth', 9), ('min_child_weight', 1), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.14387190000002192,0.0010606233333343576,540.8125,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.025), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.01), ('max_depth', 7), ('min_child_weight', 7), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12009599999987586,0.0009688833333332999,541.07421875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.9), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 7), ('min_child_weight', 1), ('subsample', 1.0), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.15097240000000056,0.0010272366666640663,541.3828125,0.9665831244778613,0.9666666666666667,0.9916666666666667,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 5), ('min_child_weight', 7), ('subsample', 0.9), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12536180000006425,0.0009937166666607784,541.3515625,0.9665831244778613,0.9666666666666667,0.995,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.9), ('eta', 0.01), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.01), ('max_depth', 7), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.12464649999992616,0.0010837000000037734,541.1875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.1), ('colsample_bytree', 0.9), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.3), ('lambda', 0.01), ('max_depth', 12), ('min_child_weight', 1), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.15961129999982404,0.0010245766666685085,541.63671875,0.9665831244778613,0.9666666666666667,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.naive_bayes.MultinomialNB'>,"OrderedDict([('fit_prior', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.00384240000016689,0.0005058666666703478,1947.59765625,0.7660818713450293,0.7666666666666666,0.8333333333333334,"[[10  0  0]
 [ 0  6  4]
 [ 0  3  7]]"
<class 'sklearn.naive_bayes.MultinomialNB'>,"OrderedDict([('fit_prior', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003446500000109154,0.000465923333331375,1947.109375,0.7660818713450293,0.7666666666666666,0.8333333333333334,"[[10  0  0]
 [ 0  6  4]
 [ 0  3  7]]"
<class 'sklearn.ensemble._gb.GradientBoostingClassifier'>,"OrderedDict([('loss', 'deviance')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.282450899999958,0.00045636666666268864,2051.1953125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier'>,"OrderedDict([('warm_start', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.4788625000001048,0.002150413333341324,2058.703125,0.9665831244778613,0.9666666666666667,0.9900000000000001,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier'>,"OrderedDict([('warm_start', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.47575270000015735,0.0021396933333259465,2058.671875,0.9665831244778613,0.9666666666666667,0.9900000000000001,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 1000.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.04369249999990643,0.0004887633333358584,2115.48828125,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 100.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.030287199999747827,0.0005098333333383683,2115.56640625,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 1.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0188069999999243,0.0004927566666689623,2115.77734375,0.9333333333333333,0.9333333333333332,0.9883333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 10.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.025390299999799026,0.0004604466666629984,2115.546875,0.9333333333333333,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 0.001), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.018519300000207295,0.000914803333337962,2115.80078125,0.7277167277167277,0.7666666666666666,0.8433333333333334,"[[10  0  0]
 [ 1  3  6]
 [ 0  0 10]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 0.1), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.013849600000412465,0.0005051999999977852,2115.69140625,0.861111111111111,0.8666666666666667,0.9516666666666667,"[[10  0  0]
 [ 0  6  4]
 [ 0  0 10]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 0.01), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.033318400000098336,0.0008485933333304274,2115.734375,0.7746031746031747,0.7999999999999999,0.85,"[[10  0  0]
 [ 1  4  5]
 [ 0  0 10]]"
