algorithm,params,features,n_features,train_time,predict_time,mem_max,f1_weighted,balanced_accuracy,roc_auc_ovr_weighted,confusion_matrix
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 3), ('min_child_weight', 3), ('subsample', 0.7), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.11404329999999163,0.0009195633333320075,2120.828125,1.0,1.0,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  0 10]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.8), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.05), ('lambda', 0.1), ('max_depth', 15), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.10924239999997098,0.0009323766666663384,2119.0546875,1.0,1.0,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  0 10]]"
<class 'sklearn.tree._classes.DecisionTreeClassifier'>,"OrderedDict([('criterion', 'gini')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.002877699999999095,0.000328289999999735,1915.3984375,0.9665831244778613,0.9666666666666667,0.975,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.ensemble._voting.VotingClassifier'>,"OrderedDict([('n_jobs', -1), ('voting', 'soft'), ('estimators', [('e1', XGBClassifier(alpha=0.5, base_score=None, booster=None, colsample_bylevel=None,
              colsample_bynode=None, colsample_bytree=0.7,
              enable_categorical=False, eta=0.05, eval_metric='mlogloss',
              gamma=0.7, gpu_id=None, importance_type=None,
              interaction_constraints=None, lambda=0.1, learning_rate=None,
              max_delta_step=None, max_depth=3, min_child_weight=3, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,
              subsample=0.7, tree_method=None, ...)), ('e2', KNeighborsClassifier(n_jobs=-1, n_neighbors=11, p=3)), ('e3', GradientBoostingClassifier())])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.33827009999998836,0.007285233333334418,2164.6015625,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._voting.VotingClassifier'>,"OrderedDict([('n_jobs', -1), ('voting', 'soft'), ('estimators', [('e1', XGBClassifier(alpha=0.5, base_score=None, booster=None, colsample_bylevel=None,
              colsample_bynode=None, colsample_bytree=0.7,
              enable_categorical=False, eta=0.05, eval_metric='mlogloss',
              gamma=0.7, gpu_id=None, importance_type=None,
              interaction_constraints=None, lambda=0.1, learning_rate=None,
              max_delta_step=None, max_depth=3, min_child_weight=3, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,
              subsample=0.7, tree_method=None, ...)), ('e2', KNeighborsClassifier(n_jobs=-1, n_neighbors=11, p=3)), ('e3', GradientBoostingClassifier())])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.33950329999998985,0.007282186666666727,2161.07421875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 0.5), ('colsample_bytree', 0.7), ('eta', 0.015), ('eval_metric', 'mlogloss'), ('gamma', 0.7), ('lambda', 0.1), ('max_depth', 9), ('min_child_weight', 3), ('subsample', 0.8), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1209423999999899,0.0008970500000013241,2121.12890625,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 7), ('p', 2)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0067240999999995665,0.010420076666666726,1847.4453125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1000.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.006569700000000012,0.00046224333333337125,1849.42578125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1.0), ('class_weight', 'balanced'), ('gamma', 'auto'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004821199999994974,0.0003530033333333904,1848.83203125,0.9665831244778613,0.9666666666666667,0.9949999999999999,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 100.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.03571250000004511,0.00041808666666535527,2132.66796875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 1000.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.036099499999977525,0.00031533333333300106,2132.6953125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 100.0), ('class_weight', 'balanced'), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0045135000000016134,0.00036089333333346,1849.08203125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 30), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 10), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3255465000000015,0.007580960000000422,1973.7734375,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0  9  1]
 [ 0  0 10]]"
<class 'sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis'>,"OrderedDict([('priors', None)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.004111799999975574,0.00038999666666654774,1985.08203125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 11), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.007555100000001147,0.008004393333333226,1841.58984375,0.9665831244778613,0.9666666666666667,0.9983333333333334,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._gb.GradientBoostingClassifier'>,"OrderedDict([('loss', 'deviance')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.21985709999995606,0.0004230866666678897,2121.29296875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 25), ('max_features', None), ('min_samples_leaf', 5), ('min_samples_split', 5), ('n_estimators', 500), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.5603835999999944,0.01789979333333349,1975.48046875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._voting.VotingClassifier'>,"OrderedDict([('n_jobs', -1), ('voting', 'soft'), ('estimators', [('e1', XGBClassifier(alpha=0.5, base_score=None, booster=None, colsample_bylevel=None,
              colsample_bynode=None, colsample_bytree=0.7,
              enable_categorical=False, eta=0.05, eval_metric='mlogloss',
              gamma=0.7, gpu_id=None, importance_type=None,
              interaction_constraints=None, lambda=0.1, learning_rate=None,
              max_delta_step=None, max_depth=3, min_child_weight=3, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,
              subsample=0.7, tree_method=None, ...)), ('e2', KNeighborsClassifier(n_jobs=-1, n_neighbors=11, p=3)), ('e3', GradientBoostingClassifier())])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.36383360000002085,0.007379770000000008,2168.85546875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>,"OrderedDict([('algorithm', 'SAMME.R')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.07943159999996396,0.0011968600000007731,1982.1953125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 5), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0026213999999988857,0.009516386666666677,1843.71875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier'>,"OrderedDict([('warm_start', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.404509800000028,0.0019398233333333792,2129.2109375,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 15), ('max_features', 'sqrt'), ('min_samples_leaf', 2), ('min_samples_split', 5), ('n_estimators', 800), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.6829924999999832,0.025395506666667227,1978.0859375,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.naive_bayes.GaussianNB'>,"OrderedDict([('priors', None)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0024887000000148873,0.0003161833333346446,1981.96484375,0.9333333333333333,0.9333333333333332,0.9933333333333333,"[[10  0  0]
 [ 0  9  1]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'constant'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.2389843000000269,0.0007400899999993271,1981.94140625,0.9326599326599326,0.9333333333333332,0.9966666666666667,"[[10  0  0]
 [ 0  8  2]
 [ 0  0 10]]"
<class 'sklearn.gaussian_process._gpc.GaussianProcessClassifier'>,"OrderedDict([('copy_X_train', False), ('n_jobs', -1), ('warm_start', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.016183699999999135,0.0023874699999993252,1904.35546875,0.8997493734335841,0.9,0.9766666666666667,"[[10  0  0]
 [ 0  8  2]
 [ 0  1  9]]"
<class 'sklearn.gaussian_process._gpc.GaussianProcessClassifier'>,"OrderedDict([('copy_X_train', False), ('n_jobs', -1), ('warm_start', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.014265999999992118,0.0028026033333333087,1894.30078125,0.8997493734335841,0.9,0.9766666666666667,"[[10  0  0]
 [ 0  8  2]
 [ 0  1  9]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 1.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.015553900000043086,0.0003266799999986839,2132.94921875,0.8997493734335841,0.9,0.9800000000000001,"[[10  0  0]
 [ 0  8  2]
 [ 0  1  9]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.1252523999999937,0.0003102466666670504,1981.84765625,0.8997493734335841,0.9,0.9933333333333333,"[[10  0  0]
 [ 0  8  2]
 [ 0  1  9]]"
<class 'sklearn.naive_bayes.MultinomialNB'>,"OrderedDict([('fit_prior', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003222400000026937,0.00033859999999966324,2118.26953125,0.8653198653198653,0.8666666666666666,0.8333333333333334,"[[10  0  0]
 [ 0  9  1]
 [ 0  3  7]]"
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.22814729999998917,0.0006950633333332234,1981.609375,0.861111111111111,0.8666666666666667,0.9716666666666666,"[[10  0  0]
 [ 0  6  4]
 [ 0  0 10]]"
<class 'sklearn.ensemble._stacking.StackingClassifier'>,"OrderedDict([('n_jobs', -1), ('stack_method', 'auto'), ('estimators', [('e1', XGBClassifier(alpha=0.5, base_score=None, booster=None, colsample_bylevel=None,
              colsample_bynode=None, colsample_bytree=0.7,
              enable_categorical=False, eta=0.05, eval_metric='mlogloss',
              gamma=0.7, gpu_id=None, importance_type=None,
              interaction_constraints=None, lambda=0.1, learning_rate=None,
              max_delta_step=None, max_depth=3, min_child_weight=3, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,
              subsample=0.7, tree_method=None, ...)), ('e2', DecisionTreeClassifier()), ('e3', KNeighborsClassifier(n_jobs=-1, n_neighbors=7))])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.5335698000000093,0.00712727333333305,2212.3828125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._stacking.StackingClassifier'>,"OrderedDict([('n_jobs', -1), ('stack_method', 'auto'), ('estimators', [('e1', XGBClassifier(alpha=0.5, base_score=None, booster=None, colsample_bylevel=None,
              colsample_bynode=None, colsample_bytree=0.7,
              enable_categorical=False, eta=0.05, eval_metric='mlogloss',
              gamma=0.7, gpu_id=None, importance_type=None,
              interaction_constraints=None, lambda=0.1, learning_rate=None,
              max_delta_step=None, max_depth=3, min_child_weight=3, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,
              subsample=0.7, tree_method=None, ...)), ('e2', DecisionTreeClassifier()), ('e3', KNeighborsClassifier(n_jobs=-1, n_neighbors=7))])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.5276044000000297,0.0070243299999996605,2214.96875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._stacking.StackingClassifier'>,"OrderedDict([('n_jobs', -1), ('stack_method', 'auto'), ('estimators', [('e1', XGBClassifier(alpha=0.5, base_score=None, booster=None, colsample_bylevel=None,
              colsample_bynode=None, colsample_bytree=0.7,
              enable_categorical=False, eta=0.05, eval_metric='mlogloss',
              gamma=0.7, gpu_id=None, importance_type=None,
              interaction_constraints=None, lambda=0.1, learning_rate=None,
              max_delta_step=None, max_depth=3, min_child_weight=3, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,
              subsample=0.7, tree_method=None, ...)), ('e2', DecisionTreeClassifier()), ('e3', KNeighborsClassifier(n_jobs=-1, n_neighbors=7))])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.5190188000000262,0.007333746666665775,2223.0546875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
