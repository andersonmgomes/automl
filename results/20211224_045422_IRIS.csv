algorithm,params,features,n_features,train_time,predict_time,mem_max,f1_weighted,balanced_accuracy,roc_auc_ovr_weighted,confusion_matrix
<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>,"OrderedDict([('learning_rate', 'invscaling'), ('momentum', 0.5)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.3147531999999984,0.0005821100000000949,1894.328125,1.0,1.0,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  0 10]]"
<class 'sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis'>,"OrderedDict([('priors', None)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0028027000000179214,0.00042408666666631233,1900.859375,1.0,1.0,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  0 10]]"
<class 'sklearn.linear_model._logistic.LogisticRegression'>,"OrderedDict([('C', 1000.0), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.027589999999975134,0.00034611000000002906,1987.3359375,1.0,1.0,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  0 10]]"
<class 'sklearn.ensemble._voting.VotingClassifier'>,"OrderedDict([('n_jobs', -1), ('voting', 'soft'), ('estimators', [('e1', MLPClassifier(learning_rate='invscaling', momentum=0.5)), ('e2', QuadraticDiscriminantAnalysis()), ('e3', LogisticRegression(C=1000.0, n_jobs=-1))])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.17870329999999512,0.0007463966666657976,2006.765625,1.0,1.0,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  0 10]]"
<class 'sklearn.ensemble._stacking.StackingClassifier'>,"OrderedDict([('n_jobs', -1), ('stack_method', 'auto'), ('estimators', [('e1', MLPClassifier(learning_rate='invscaling', momentum=0.5)), ('e2', QuadraticDiscriminantAnalysis()), ('e3', LogisticRegression(C=1000.0, n_jobs=-1))])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.2592276999999967,0.0009802033333320044,2018.28125,1.0,1.0,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  0 10]]"
<class 'sklearn.neighbors._classification.KNeighborsClassifier'>,"OrderedDict([('n_jobs', -1), ('n_neighbors', 11), ('p', 3)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.0024990999999996433,0.005456070000000027,1339.71875,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.svm._classes.SVC'>,"OrderedDict([('C', 1000.0), ('class_weight', None), ('gamma', 'scale'), ('probability', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.00569409999999948,0.0005163799999998275,1684.70703125,0.9665831244778613,0.9666666666666667,0.9633333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.gaussian_process._gpc.GaussianProcessClassifier'>,"OrderedDict([('copy_X_train', False), ('n_jobs', -1), ('warm_start', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.02572089999999605,0.0038368366666666986,1849.01171875,0.9665831244778613,0.9666666666666667,0.9883333333333333,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.tree._classes.DecisionTreeClassifier'>,"OrderedDict([('criterion', 'gini')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.002661000000003355,0.0003567000000003873,1857.93359375,0.9665831244778613,0.9666666666666667,0.975,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.ensemble._forest.RandomForestClassifier'>,"OrderedDict([('max_depth', 30), ('max_features', 'sqrt'), ('min_samples_leaf', 10), ('min_samples_split', 10), ('n_estimators', 120), ('n_jobs', -1)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.39045389999999713,0.00884021999999997,1890.2578125,0.9665831244778613,0.9666666666666667,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'sklearn.naive_bayes.GaussianNB'>,"OrderedDict([('priors', None)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.007216999999997142,0.0008743666666669961,1898.94921875,0.9665831244778613,0.9666666666666667,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  1  9]]"
<class 'xgboost.sklearn.XGBClassifier'>,"OrderedDict([('alpha', 1.0), ('colsample_bytree', 0.8), ('eta', 0.05), ('eval_metric', 'mlogloss'), ('gamma', 0.05), ('lambda', 0.1), ('max_depth', 15), ('min_child_weight', 5), ('subsample', 0.6), ('use_label_encoder', False)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.11571959999997716,0.001005849999999479,1967.8984375,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._gb.GradientBoostingClassifier'>,"OrderedDict([('loss', 'deviance')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.23912260000000174,0.00043180000000025607,1969.73828125,0.9326599326599326,0.9333333333333332,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier'>,"OrderedDict([('warm_start', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.43373440000002006,0.002062130000000669,1984.71484375,0.9326599326599326,0.9333333333333332,0.9966666666666666,"[[10  0  0]
 [ 0 10  0]
 [ 0  2  8]]"
<class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>,"OrderedDict([('algorithm', 'SAMME.R')])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.09069680000000346,0.0012436399999998572,1898.74609375,0.8976982097186702,0.9,0.9949999999999998,"[[10  0  0]
 [ 0 10  0]
 [ 0  3  7]]"
<class 'sklearn.naive_bayes.MultinomialNB'>,"OrderedDict([('fit_prior', True)])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,0.003549500000019634,0.00041574333333282233,1968.19921875,0.8329156223893065,0.8333333333333334,0.8333333333333334,"[[10  0  0]
 [ 0  8  2]
 [ 0  3  7]]"
<class 'sklearn.ensemble._stacking.StackingClassifier'>,"OrderedDict([('n_jobs', -1), ('stack_method', 'auto'), ('estimators', [('e1', MLPClassifier(learning_rate='invscaling', momentum=0.5)), ('e2', QuadraticDiscriminantAnalysis()), ('e3', LogisticRegression(C=1000.0, n_jobs=-1))])])","('sepal_length', 'sepal_width', 'petal_length', 'petal_width')",4,1.1692932999999925,0.0009095266666671857,2086.91796875,1.0,1.0,1.0,"[[10  0  0]
 [ 0 10  0]
 [ 0  0 10]]"
